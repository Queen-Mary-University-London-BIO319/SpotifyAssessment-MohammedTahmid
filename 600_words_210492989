At the very beginning, using the ‘read.table’ function, I opened the text file ‘Spotify_Messy_210492989.txt’, saving it into a data frame called ‘spotify_data’. The ‘sep = "\t"’ argument specifies that the file is tab-separated, and ‘header = TRUE’ indicates that the first row of the file contains column names, as in my case, the first row contained all the column names. I used the ‘View()’ function to open a new window in RStudio, to display the data frame ‘spotify_data’ in a tabular format. This allowed me to explore the data and notice inaccuracies more easily, compared to simply printing it to the console. I installed and loaded 2 packages that I would be using to tidy the data as I used them previously. These packages were ‘tidyr’ and ‘dply’, which are very commonly used for data manipulation and tidying tasks in R. 
After looking at my column names, I found some misspelt columns such as ‘TTracknameff5’, which I renamed using the ‘colnames() function, to ‘track_name’. I also ensured that throughout the entire data set, I made everything lowercase, using the ‘spotify_data %>% rename_with(tolower, everything())’. The pipe symbol (%>%) is an operator from dplyr package, which is used to pass the ‘spotify_data’ data frame into the following function. 
I also noticed that my column name, ‘danceability_energy’ was together, as well as the values. Which I was informed that my colleague would be using the danceability scores to compare across the dataset. After cross referencing with the dictionary, I noticed that they are supposed to be individual columns, with their own values. Using the ‘separate_wider_delim’, I split the column name into ‘danceability’ and ‘energy’ and separated the values, so that they go to the respective columns (they were separated by an underscore). 
I noticed how the ‘track_id’, ‘album_id’ and ‘playlist_id’ shared the exact same values, so using the select() function, I chose to remove the ‘album_id’ and ‘playlist_id’, and using the rename() function, I made ‘track_id’ into ‘track_album_playlist_id’. I did this to ensure that there was no excess and unnecessary columns and cells. The next line of code utilises ‘gsub’ to check for any non-numeric characters, except periods, from the ‘mode’ column and remove them, if necessary. 
The next few lines, I cross reference to the dictionary, and change the data structures of the columns into ‘doubles’, where necessary. I used the mutate() function and ‘as.double’ to convert them. I converted the following columns: danceability, energy, key, loudness, mode, speechiness, acousticness, instrumentalness, liveness, valence, tempo, duration_ms. This allows us to manipulate the data further if required.
Using the search bar, on the table tab, I searched for the celebrity names that were misspelt. I found that ‘Bad Bunny’ was spelt ‘Bad Sunny’. To rectify this, I used the mutate() function and case_when() to perform a case-insensitive search for ‘Bad Sunny’ and replace it to ‘Bad Bunny’. I then used glimpse() and str () functions to see whether the previous set of code (as.double etc) was working, to which it did. 
After further reading of the dictionary, I saw how there were ranges for some of the columns such as danceability, energy and key. Using the mutate function, I ensured that these ranges were being met, and if they were not within the ranges provided, they would be replaced by an ‘NA’. Specifically, with the ‘key’ column, it asked for standard pitch notation, which I Googled and found its range was to 11. 
I finally made my clean data into a text file called ‘spotify_clean_data_output.txt’.
